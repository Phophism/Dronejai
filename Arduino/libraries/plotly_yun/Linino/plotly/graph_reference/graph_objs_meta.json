{
    "plotlylist": {}, 
    "data": {}, 
    "annotations": {}, 
    "plotlydict": {}, 
    "plotlytrace": {}, 
    "trace": {
        "x": {
            "type": "data"
        }, 
        "y": {
            "type": "data"
        }, 
        "z": {
            "type": "data"
        }, 
        "r": {
            "type": "data"
        }, 
        "t": {
            "type": "data"
        }, 
        "text": {
            "type": "data"
        }, 
        "name": {
            "type": "data"
        }, 
        "mode": {
            "type": "plot_info"
        }, 
        "marker": {
            "type": "object"
        }, 
        "line": {
            "type": "object"
        }, 
        "fill": {
            "type": "style"
        }, 
        "fillcolor": {
            "type": "style"
        }, 
        "opacity": {
            "type": "style"
        }, 
        "showlegend": {
            "type": "style"
        }, 
        "xaxis": {
            "type": "plot_info"
        }, 
        "yaxis": {
            "type": "plot_info"
        }, 
        "angularAxis": {}, 
        "radialAxis": {}, 
        "error_y": {
            "type": "object"
        }, 
        "textfont": {
            "type": "object"
        }, 
        "type": {
            "type": "plot_info"
        }, 
        "orientation": {
            "type": "plot_info"
        }, 
        "boxpoints": {
            "type": "style"
        }, 
        "jitter": {
            "type": "style"
        }, 
        "pointpos": {
            "type": "style"
        }, 
        "boxmean": {
            "type": "style"
        }, 
        "whiskerwidth": {
            "type": "style"
        }, 
        "scl": {
            "type": "style"
        }, 
        "reversescl": {
            "type": "style"
        }, 
        "colorbar": {
            "type": "object"
        }, 
        "autobinx": {
            "type": "style"
        }, 
        "autobiny": {
            "type": "style"
        }, 
        "xbins": {
            "type": "object"
        }, 
        "ybins": {
            "type": "object"
        }, 
        "histnorm": {
            "type": "plot_info"
        }, 
        "zmax": {
            "type": "plot_info"
        }, 
        "zmin": {
            "type": "plot_info"
        }, 
        "dx": {}, 
        "dy": {}, 
        "x0": {}, 
        "y0": {}, 
        "zauto": {
            "type": "plot_info"
        }, 
        "hm_id": {}, 
        "nbinsx": {
            "type": "style"
        }, 
        "nbinsy": {
            "type": "style"
        }, 
        "showscale": {
            "type": "style"
        }
    }, 
    "scatter": {
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The x coordinates from the (x,y) pair on the scatter plot."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The y coordinates from the (x,y) pair on the scatter plot."
        }, 
        "text": {
            "val_types": "array-like of strings", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "The text elements associated with every (x,y) pair on the scatter plot. If the scatter 'mode' doesn't include 'text' then text will appear on hover. If 'text' is included in 'mode', the entries in 'text' will be rendered on the plot at the locations specified by their corresponding (x, y) pair."
        }, 
        "textposition": {
            "val_types": "'top' | 'bottom'", 
            "required": false, 
            "type": "style", 
            "description": "Set's position of the text elements in the 'text' key."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "mode": {
            "val_types": "'lines' | 'markers' | 'text' | 'lines+markers' | 'lines+text' | 'markers+text' | 'lines+markers+text'", 
            "required": false, 
            "type": "plot_info", 
            "description": "Plotting mode (style) for the scatter plot. If the mode includes 'text' then the 'text' will appear at the (x,y) points, otherwise it will appear on hover."
        }, 
        "marker": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "streamable": true, 
            "description": "A dictionary-like object containing information about the marker style of the scatter plot."
        }, 
        "line": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object containing information about the line connecting points on the scatter plot."
        }, 
        "fill": {
            "default": "none", 
            "val_types": "'none' | 'tozeroy' | 'tonexty' | 'tozerox' | 'tonextx", 
            "required": false, 
            "type": "style", 
            "description": "Used to make area-style charts. Determines which area to fill with a solid color."
        }, 
        "fillcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "If the 'fill' for a line is not 'none', the fill color will appear in the specified fill area."
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "error_y": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing vertical error bars that can be drawn with this trace's (x, y) points."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "textfont": {
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing the font style of this scatter's text elements. This only has an effect if 'text' is an array of strings and 'mode' is set to include 'text'."
        }, 
        "r": {
            "requried": false, 
            "type": "data"
        }, 
        "t": {
            "requried": false, 
            "type": "data"
        }, 
        "type": {
            "val_types": "'scatter'", 
            "required": false, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "area": {
        "x": {
            "type": "data"
        }, 
        "y": {
            "type": "data"
        }, 
        "z": {
            "type": "data"
        }, 
        "r": {
            "type": "data"
        }, 
        "t": {
            "type": "data"
        }, 
        "text": {
            "type": "data"
        }, 
        "textposition": {
            "type": "plot_info"
        }, 
        "name": {
            "type": "data"
        }, 
        "mode": {
            "type": "plot_info"
        }, 
        "marker": {
            "type": "object"
        }, 
        "line": {
            "type": "object"
        }, 
        "fill": {
            "type": "style"
        }, 
        "fillcolor": {
            "type": "style"
        }, 
        "opacity": {
            "type": "style"
        }, 
        "showlegend": {
            "type": "style"
        }, 
        "xaxis": {
            "type": "plot_info"
        }, 
        "yaxis": {
            "type": "plot_info"
        }, 
        "angularAxis": {}, 
        "radialAxis": {}, 
        "error_y": {
            "type": "object"
        }, 
        "textfont": {
            "type": "object"
        }, 
        "type": {
            "type": "plot_info"
        }, 
        "orientation": {
            "type": "plot_info"
        }, 
        "boxpoints": {
            "type": "style"
        }, 
        "jitter": {
            "type": "style"
        }, 
        "pointpos": {
            "type": "style"
        }, 
        "boxmean": {
            "type": "style"
        }, 
        "whiskerwidth": {
            "type": "style"
        }, 
        "scl": {
            "type": "style"
        }, 
        "reversescl": {
            "type": "style"
        }, 
        "colorbar": {
            "type": "object"
        }, 
        "autobinx": {
            "type": "style"
        }, 
        "autobiny": {
            "type": "style"
        }, 
        "xbins": {
            "type": "object"
        }, 
        "ybins": {
            "type": "object"
        }, 
        "histnorm": {
            "type": "plot_info"
        }, 
        "zmax": {
            "type": "plot_info"
        }, 
        "zmin": {
            "type": "plot_info"
        }, 
        "dx": {}, 
        "dy": {}, 
        "x0": {}, 
        "y0": {}, 
        "zauto": {
            "type": "plot_info"
        }, 
        "hm_id": {}, 
        "nbinsx": {
            "type": "style"
        }, 
        "nbinsy": {
            "type": "style"
        }, 
        "showscale": {
            "type": "style"
        }
    }, 
    "bar": {
        "x": {
            "val_types": "array-like of numbers, strings, datetimes OR array-like of strings", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The x coordinates of the bars or the bar chart's categories."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes OR array-like of strings", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The y coordinates of the bars or the bar chart's categories."
        }, 
        "orientation": {
            "val_types": "'v' | 'h'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines the direction of the bars. If set to 'v', the length of each bar will run vertically.If set to 'h', the length of each bar will run horizontally"
        }, 
        "text": {
            "val_types": "array-like of strings", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "This array of strings corresponds to the bar at location 'x' with length 'y'. This will appear upon hovering over the bar."
        }, 
        "textposition": {
            "val_types": "'top' | 'bottom'", 
            "required": false, 
            "type": "style", 
            "description": "Set's position of the text elements in the 'text' key."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "marker": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "streamable": true
        }, 
        "line": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object containing information about the enclosing line for each bar."
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "error_y": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing vertical error bars that can be drawn with this trace's (x, y) points."
        }, 
        "textfont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing the font for the strings listed in the 'text' string-array."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "type": {
            "val_types": "'bar'", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }, 
        "r": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data"
        }, 
        "t": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data"
        }
    }, 
    "box": {
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "This array is used to define the an individual box plot, or, a concatenation of multiple boxplots. Statistics from these numbers define the bounds of the box, the length of the whiskers, etc. For details on defining multiple boxes with locations see 'x'."
        }, 
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "code": ">>> y0 = [1,2,3,1,1]>>> y1 = [3,2,1,2,3]>>> y = y0+y1  # the syntax is different for numpy arrays!>>> x = [0,0,0,0,0,1,1,1,1,1]  # len(x) == len(y)>>> Box(y=y, x=x, name='two boxes SHARE this name.')", 
            "description": "Usually, you do NOT need to set this value as plotly will handle box locations for you. However this allows you to have fine control over the location data for the box. Unlike making a bar, a box plot is made of MANY y values. Therefore, to give location data to the values you place in 'y', the length of 'x' must equal the length of 'y'. When making multiple box plots, you can concatenate the data sets for each box into a single 'y' array. Then, the entries in 'x' define which box plot each entry in 'y' belongs to. When making a single box plot, you must set each entry in 'x' to THE SAME VALUE, see 'x0' for a more practical way to handle this case. If you don't include 'x', the box will simply be assigned a location.", 
            "required": false, 
            "type": "data", 
            "streamable": true
        }, 
        "x0": {
            "val_types": "number", 
            "required": false, 
            "type": "data", 
            "description": "The location of this box. When 'y' defines a SINGLE box, 'x0' can be used to set where this box is centered on the x-axis. If many boxes are set to appear at the same 'x0' location, they will form a box group."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "boxpoints": {
            "default": false, 
            "val_types": "'all' | 'outliers' | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "If 'all' then the 'y' points are shown with the box. If 'outliers' then only the 'outliers' of the 'y' points are shown. If False then no points are shown"
        }, 
        "jitter": {
            "val_types": "number in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Width of the jittered scatter. If 0, then the boxpoints are aligned vertically, if 1 then the points are randomly jittered horizontally up to the width of the box."
        }, 
        "pointpos": {
            "val_types": "number: x in [-2, 2]", 
            "required": false, 
            "type": "style", 
            "description": "Horizontal position of the center of the boxpoints relative to the center and width of the box."
        }, 
        "boxmean": {
            "default": "False", 
            "val_types": "False | True | 'sd'", 
            "required": false, 
            "type": "style", 
            "description": "If True then the mean of the y-points is shown as a dashed line in the box. If 'sd', then the standard deviation is also shown. If False, then no line shown."
        }, 
        "whiskerwidth": {
            "default": 0.75, 
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Width of the whisker of the box."
        }, 
        "fillcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Color of the box interior."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "xaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "marker": {
            "streamable": true, 
            "required": false, 
            "type": "object"
        }, 
        "line": {
            "required": false, 
            "type": "object"
        }, 
        "type": {
            "val_types": "box", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "contour": {
        "z": {
            "val_types": "matrix-like: list of lists, numpy.matrix", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The data that describes the mapping. The dimensions of the 'z' matrix are (n x m) where there are 'n' ROWS defining the number of partitions along the y-axis; this is equal to the length of the 'y' array. There are 'm' COLUMNS defining the number of partitions along the x-axis; this is equal to the length of the 'x' array. Therefore, the color of the cell z[i][j] is mapped to the ith partition of the y-axis (starting from the bottom of the plot) and the jth partition of the x-axis (starting from the left of the plot). In Python, a (non-numpy) matrix is best thought of as a list of lists (of lists, of lists, etc.). Therefore, running len(z) will give you the number of ROWS and running len(z[0]) will give you the number of COLUMNS. If you ARE using numpy, then running z.shape will give you the tuple, (n, m), e.g., (3, 5)."
        }, 
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "This array-like value contains the HORIZONTAL labels referring to the COLUMNS of the 'z' matrix. If strings, the x-labels are spaced evenly. If the dimensions of z are (n x m), the length of the 'x' array should be 'm'."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "This array-like value contains the VERTICAL labels referring to the ROWS of the 'z' matrix. If strings, the y-labels are spaced evenly. If the dimensions of z are (n x m), the length of the 'y' array should be 'n'."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "autocontour": {
            "default": true, 
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "If True, the contours settings are set automatically. If False, the contours settings must be set manually with the contours object."
        }, 
        "ncontours": {
            "default": 0, 
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Speficy the number of countours lines that will appear."
        }, 
        "contours": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object defining parameters of the contours in this plot like spacing, whether or not to show lines, etc."
        }, 
        "scl": {
            "val_types": "array_like of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
            "required": false, 
            "type": "style", 
            "examples": [
                "Greys", 
                [
                    [
                        0, 
                        "rgb(0,0,0)"
                    ], 
                    [
                        1, 
                        "rgb(255,255,255)"
                    ]
                ], 
                [
                    [
                        0, 
                        "rgb(8, 29, 88)"
                    ], 
                    [
                        0.125, 
                        "rgb(37, 52, 148)"
                    ], 
                    [
                        0.25, 
                        "rgb(34, 94, 168)"
                    ], 
                    [
                        0.375, 
                        "rgb(29, 145, 192)"
                    ], 
                    [
                        0.5, 
                        "rgb(65, 182, 196)"
                    ], 
                    [
                        0.625, 
                        "rgb(127, 205, 187)"
                    ], 
                    [
                        0.75, 
                        "rgb(199, 233, 180)"
                    ], 
                    [
                        0.875, 
                        "rgb(237, 248, 217)"
                    ], 
                    [
                        1, 
                        "rgb(255, 255, 217)"
                    ]
                ]
            ], 
            "description": "The color scale. The strings are pre-defined color scales. For custom color scales, define a list of color-value pairs, where the first element of the pair corresponds to a normalized value of z from 0-1  (i.e. (z-zmin)/(zmax-zmin)), and the second element of pair corresponds to a color."
        }, 
        "reversescl": {
            "required": false, 
            "type": "style"
        }, 
        "colorbar": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "This object represents a color bar that will be shown on the figure where the color is related to the data being shown."
        }, 
        "zmin": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "The value used as the minimum in the color scale normalization in 'scl'. The default is the minimum of the 'z' data values."
        }, 
        "zmax": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "The value used as the maximum in the color scale normalization in 'scl'. The default is the minimum of the 'z' data values."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "showscale": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the rendered figure."
        }, 
        "xtype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "ytype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "dx": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "dy": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "zauto": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "sytle"
        }, 
        "type": {
            "val_types": "contour", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "heatmap": {
        "z": {
            "val_types": "matrix-like: list of lists, numpy.matrix", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The data that describes the mapping. The dimensions of the 'z' matrix are (n x m) where there are 'n' ROWS defining the number of partitions along the y-axis; this is equal to the length of the 'y' array. There are 'm' COLUMNS defining the number of partitions along the x-axis; this is equal to the length of the 'x' array. Therefore, the color of the cell z[i][j] is mapped to the ith partition of the y-axis (starting from the bottom of the plot) and the jth partition of the x-axis (starting from the left of the plot). In Python, a (non-numpy) matrix is best thought of as a list of lists (of lists, of lists, etc.). Therefore, running len(z) will give you the number of ROWS and running len(z[0]) will give you the number of COLUMNS. If you ARE using numpy, then running z.shape will give you the tuple, (n, m), e.g., (3, 5)."
        }, 
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "This array-like value contains the HORIZONTAL labels referring to the COLUMNS of the 'z' matrix. If strings, the x-labels are spaced evenly. If the dimensions of z are (n x m), the length of the 'x' array should be 'm'."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": false, 
            "type": "data", 
            "streamable": true, 
            "description": "This array-like value contains the VERTICAL labels referring to the ROWS of the 'z' matrix. If strings, the y-labels are spaced evenly. If the dimensions of z are (n x m), the length of the 'y' array should be 'n'."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "scl": {
            "val_types": "array_like of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
            "required": false, 
            "type": "style", 
            "examples": [
                "Greys", 
                [
                    [
                        0, 
                        "rgb(0,0,0)"
                    ], 
                    [
                        1, 
                        "rgb(255,255,255)"
                    ]
                ], 
                [
                    [
                        0, 
                        "rgb(8, 29, 88)"
                    ], 
                    [
                        0.125, 
                        "rgb(37, 52, 148)"
                    ], 
                    [
                        0.25, 
                        "rgb(34, 94, 168)"
                    ], 
                    [
                        0.375, 
                        "rgb(29, 145, 192)"
                    ], 
                    [
                        0.5, 
                        "rgb(65, 182, 196)"
                    ], 
                    [
                        0.625, 
                        "rgb(127, 205, 187)"
                    ], 
                    [
                        0.75, 
                        "rgb(199, 233, 180)"
                    ], 
                    [
                        0.875, 
                        "rgb(237, 248, 217)"
                    ], 
                    [
                        1, 
                        "rgb(255, 255, 217)"
                    ]
                ]
            ], 
            "description": "The color scale. The strings are pre-defined color scales. For custom color scales, define a list of color-value pairs, where the first element of the pair corresponds to a normalized value of z from 0-1  (i.e. (z-zmin)/(zmax-zmin)), and the second element of pair corresponds to a color."
        }, 
        "reversescl": {
            "required": false, 
            "type": "style"
        }, 
        "colorbar": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "This object represents a color bar that will be shown on the figure where the color is related to the data being shown."
        }, 
        "zmin": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "The value used as the minimum in the color scale normalization in 'scl'. The default is the minimum of the 'z' data values."
        }, 
        "zmax": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "The value used as the maximum in the color scale normalization in 'scl'. The default is the minimum of the 'z' data values."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "showscale": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the rendered figure."
        }, 
        "x0": {
            "type": "plot_info"
        }, 
        "y0": {
            "type": "plot_info"
        }, 
        "xtype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "ytype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "dx": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "dy": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "zauto": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "sytle"
        }, 
        "type": {
            "val_types": "heatmap", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "histogram": {
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The x data that is binned and plotted as bars along the x-axis."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The y data that is binned and plotted as bars along the y-axis."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "orientation": {
            "val_types": "'v' | 'h'", 
            "required": false, 
            "type": "plot_info", 
            "description": "'v' | 'h'"
        }, 
        "marker": {
            "streamable": true, 
            "required": false, 
            "type": "object", 
            "val_types": "dictionary-like"
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "line": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "autobinx": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the x direction for this histogram."
        }, 
        "xbins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the x direction for this histogram."
        }, 
        "nbinsx": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Specifies the number of bins in the x-direction."
        }, 
        "autobiny": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the y direction for this histogram."
        }, 
        "ybins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the y direction for this histogram."
        }, 
        "nbinsy": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Specifies the number of bins in the y-direction."
        }, 
        "histnorm": {
            "requried": false, 
            "val_types": "'' | 'percent' | 'probability' | 'density' | 'probability density'", 
            "type": "plot_info", 
            "description": "If histnorm is not specified, or histnorm='' (empty string), the height of each bar displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin. If histnorm='percent', the height of each bar displays the percentage of total occurrences found within the corresponding bin. If histnorm='probability', the height of each bar displays the probability that an event will fall into the corresponding bin. If histnorm='density', the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin interval such that summing the area of all bins will yield the total number of occurrences. If histnorm='probability density', the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by the size of the bin interval such that summing the area of all bins will yield 1, i.e. an event must fall into one of the bins."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "error_y": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing vertical error bars that can be drawn with this trace's (x, y) points."
        }, 
        "type": {
            "val_types": "histogram", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "histogram2d": {
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The x data that is binned and plotted as bars along the x-axis."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The y data that is binned and plotted as bars along the y-axis."
        }, 
        "scl": {
            "val_types": "array_like of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
            "required": false, 
            "type": "style", 
            "examples": [
                "Greys", 
                [
                    [
                        0, 
                        "rgb(0,0,0)"
                    ], 
                    [
                        1, 
                        "rgb(255,255,255)"
                    ]
                ], 
                [
                    [
                        0, 
                        "rgb(8, 29, 88)"
                    ], 
                    [
                        0.125, 
                        "rgb(37, 52, 148)"
                    ], 
                    [
                        0.25, 
                        "rgb(34, 94, 168)"
                    ], 
                    [
                        0.375, 
                        "rgb(29, 145, 192)"
                    ], 
                    [
                        0.5, 
                        "rgb(65, 182, 196)"
                    ], 
                    [
                        0.625, 
                        "rgb(127, 205, 187)"
                    ], 
                    [
                        0.75, 
                        "rgb(199, 233, 180)"
                    ], 
                    [
                        0.875, 
                        "rgb(237, 248, 217)"
                    ], 
                    [
                        1, 
                        "rgb(255, 255, 217)"
                    ]
                ]
            ], 
            "description": "The color scale. The strings are pre-defined color scales. For custom color scales, define a list of color-value pairs, where the first element of the pair corresponds to a normalized value of z from 0-1  (i.e. (z-zmin)/(zmax-zmin)), and the second element of pair corresponds to a color."
        }, 
        "reversescl": {
            "required": false, 
            "type": "style"
        }, 
        "colorbar": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "This object represents a color bar that will be shown on the figure where the color is related to the data being shown."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "marker": {
            "streamable": true, 
            "required": false, 
            "type": "object", 
            "val_types": "dictionary-like"
        }, 
        "line": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "autobinx": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the x direction for this histogram."
        }, 
        "autobiny": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the y direction for this histogram."
        }, 
        "xbins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the x direction for this histogram."
        }, 
        "ybins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the y direction for this histogram."
        }, 
        "nbinsx": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Specifies the number of bins in the x-direction."
        }, 
        "nbinsy": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Specifies the number of bins in the y-direction."
        }, 
        "histnorm": {
            "requried": false, 
            "val_types": "'' | 'percent' | 'probability' | 'density' | 'probability density'", 
            "type": "plot_info", 
            "description": "If histnorm is not specified, or histnorm='' (empty string), the height of each bar displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin. If histnorm='percent', the height of each bar displays the percentage of total occurrences found within the corresponding bin. If histnorm='probability', the height of each bar displays the probability that an event will fall into the corresponding bin. If histnorm='density', the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin interval such that summing the area of all bins will yield the total number of occurrences. If histnorm='probability density', the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by the size of the bin interval such that summing the area of all bins will yield 1, i.e. an event must fall into one of the bins."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "showscale": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the rendered figure."
        }, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "type": {
            "val_types": "histogram2d", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "histogram2dcontour": {
        "x": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The x data that is binned and plotted as bars along the x-axis."
        }, 
        "y": {
            "val_types": "array-like of numbers, strings, datetimes", 
            "required": true, 
            "type": "data", 
            "streamable": true, 
            "description": "The y data that is binned and plotted as bars along the y-axis."
        }, 
        "scl": {
            "val_types": "array_like of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
            "required": false, 
            "type": "style", 
            "examples": [
                "Greys", 
                [
                    [
                        0, 
                        "rgb(0,0,0)"
                    ], 
                    [
                        1, 
                        "rgb(255,255,255)"
                    ]
                ], 
                [
                    [
                        0, 
                        "rgb(8, 29, 88)"
                    ], 
                    [
                        0.125, 
                        "rgb(37, 52, 148)"
                    ], 
                    [
                        0.25, 
                        "rgb(34, 94, 168)"
                    ], 
                    [
                        0.375, 
                        "rgb(29, 145, 192)"
                    ], 
                    [
                        0.5, 
                        "rgb(65, 182, 196)"
                    ], 
                    [
                        0.625, 
                        "rgb(127, 205, 187)"
                    ], 
                    [
                        0.75, 
                        "rgb(199, 233, 180)"
                    ], 
                    [
                        0.875, 
                        "rgb(237, 248, 217)"
                    ], 
                    [
                        1, 
                        "rgb(255, 255, 217)"
                    ]
                ]
            ], 
            "description": "The color scale. The strings are pre-defined color scales. For custom color scales, define a list of color-value pairs, where the first element of the pair corresponds to a normalized value of z from 0-1  (i.e. (z-zmin)/(zmax-zmin)), and the second element of pair corresponds to a color."
        }, 
        "reversescl": {
            "required": false, 
            "type": "style"
        }, 
        "colorbar": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "This object represents a color bar that will be shown on the figure where the color is related to the data being shown."
        }, 
        "name": {
            "val_types": "string", 
            "required": false, 
            "type": "data", 
            "description": "The label associated with this trace. This name will appear in the legend, in the column header in the spreadsheet, and on hover."
        }, 
        "marker": {
            "streamable": true, 
            "required": false, 
            "type": "object", 
            "val_types": "dictionary-like"
        }, 
        "line": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "autobinx": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the x direction for this histogram."
        }, 
        "autobiny": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether or not to allow plotly to automatically pick the bin sizing in the y direction for this histogram."
        }, 
        "xbins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the x direction for this histogram."
        }, 
        "ybins": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object explaining how the bins should be created in the y direction for this histogram."
        }, 
        "nbinsx": {}, 
        "nbinsy": {}, 
        "histnorm": {}, 
        "autocontour": {
            "default": true, 
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "If True, the contours settings are set automatically. If False, the contours settings must be set manually with the contours object."
        }, 
        "ncontours": {
            "default": 0, 
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style"
        }, 
        "contours": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "xtype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "ytype": {
            "val_types": "'array' | 'scaled'", 
            "required": false, 
            "type": "style"
        }, 
        "dx": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "dy": {
            "val_types": "number", 
            "required": false, 
            "type": "style"
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not this trace will show up in the legend."
        }, 
        "xaxis": {
            "val_types": "string: 'x1' | 'x2' | 'x3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which xaxis the x coordinates in this trace will reference in the figure. 'x' references layout['xaxis'] and 'x2' references layout['xaxis2']. 'x1' will always refer to layout['xaxis'] or layout['xaxis1'], they are the same."
        }, 
        "yaxis": {
            "val_types": "string: 'y1' | 'y2' | 'y3' | etc.", 
            "required": false, 
            "type": "plot_info", 
            "description": "This key determines which yaxis the y coordinates in this trace will reference in the figure. 'y' references layout['yaxis'] and 'y2' references layout['yaxis2']. 'y1' will always refer to layout['yaxis'] or layout['yaxis1'], they are the same."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "showscale": {}, 
        "stream": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "plot_info", 
            "description": "The stream dict that initializes traces as writable-streams, for use with the real-time streaming API. See examples here:\nhttp://nbviewer.ipython.org/github/plotly/Streaming-Demos"
        }, 
        "type": {
            "val_types": "histogram2dcontour", 
            "required": true, 
            "type": "plot_info", 
            "description": "Plotly identifier for this data's trace type. This defines how this data dictionary will be handled. For example, 'scatter' type expects x and y data-arrays corresponding to (x, y) coordinates wheras a 'histogramx' only requires a single x array and a 'heatmap' type requires x and y data-arrays as well as a z matrix."
        }
    }, 
    "annotation": {
        "x": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The x coordinate of the annotation location."
        }, 
        "y": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The y coordinate of the annotation location."
        }, 
        "text": {
            "val_types": "string", 
            "required": false, 
            "type": "plot_info", 
            "description": "The text note that will be added with this annotation."
        }, 
        "textposition": {
            "val_types": "'top' | 'bottom'", 
            "required": false, 
            "type": "style", 
            "description": "Set's position of the text elements in the 'text' key."
        }, 
        "bordercolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "The color of the enclosing boarder of this annotation."
        }, 
        "borderwidth": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "The width of the boarder enclosing this annotation"
        }, 
        "borderpad": {
            "val_types": "number: x in [0, 10]", 
            "required": false, 
            "type": "style", 
            "description": "The amount of space (padding) between the text and the enclosing boarder."
        }, 
        "bgcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "The background (bg) color for this annotation."
        }, 
        "xref": {
            "val_types": "'paper' | 'x1' | 'x2' | etc", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines what the x coordinate for this object *refers* to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'x' location refers to the distance from the left side of the plotting area in normalized coordinates where 0=='left' and 1=='right'. If set to refer to an 'xaxis' object, e.g., 'x1', 'x2', 'x3', etc., the 'x' location will refer to the location in terms of this axis."
        }, 
        "yref": {
            "val_types": "'paper' | 'y1' | 'y2' | etc", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines what the x coordinate for this object *refers* to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'y' location refers to the distance from the bottom of the plotting area in normalized coordinates where 0=='bottom' and 1=='top'. If set to refer to a 'yaxis' object, e.g., 'y1', 'y2', 'y3', etc., the 'y' location will refer to the location in terms of this axis."
        }, 
        "showarrow": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Show the arrow associated with this annotation."
        }, 
        "arrowwidth": {
            "requried": false, 
            "val_types": "number: x > 0", 
            "type": "style"
        }, 
        "arrowcolor": {
            "requried": false, 
            "val_types": "str describing color", 
            "type": "style"
        }, 
        "arrowhead": {
            "requried": false, 
            "type": "style"
        }, 
        "arrowsize": {
            "requried": false, 
            "type": "style"
        }, 
        "tag": {}, 
        "font": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "align": {
            "val_types": "string: 'left' | 'center' | 'right'", 
            "required": false, 
            "type": "plot_info", 
            "description": "The alignment of the text in the annotation."
        }, 
        "xanchor": {
            "val_types": "'left' | 'center' | 'right'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines the horizontal location on the object referenced by 'x'. For example, if 'x'==1, 'xref'='paper', and 'xanchor'='right', the rightmost portion of this object will line up with the rightmost edge of the plotting area."
        }, 
        "yanchor": {
            "val_types": "'bottom' | 'middle' | 'top'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines the vertical location on the object referenced by 'y'. For example, if 'y'==1, 'yref'='paper', and 'yanchor'='top', the upper edge of this object will line up with the upper edge of the plotting area."
        }, 
        "ay": {
            "type": "plot_info"
        }, 
        "ax": {
            "type": "plot_info"
        }, 
        "xatype": {
            "type": "plot_info"
        }, 
        "yatype": {
            "type": "plot_info"
        }, 
        "ref": {
            "type": "plot_info"
        }
    }, 
    "colorbar": {}, 
    "error_y": {
        "value": {
            "required": false, 
            "type": "data"
        }, 
        "array": {
            "val_types": "array-like of numbers, strings, datetimes or number", 
            "required": false, 
            "type": "data", 
            "description": "The array of error bar spans to be drawn. This can be specified as a data-array or as a single value (see error_y's 'type' help for more information."
        }, 
        "color": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "str describing color"
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "thickness": {
            "type": "style"
        }, 
        "traceref": {}, 
        "type": {
            "val_types": "'data' | 'percent' | 'constant' | 'sqrt'", 
            "required": false, 
            "type": "plot_info", 
            "description": "Specify how the 'array' key in this error bar will be used to render the bars. Using 'data' will require 'array' to be set to a multi-valued list of spans for the error bar. Using 'percent' requires 'array' to be a single value set to the percent of error associated with all data points, e.g., array=50. Using 'constant' will set each error bar span to the single value specified in 'array', e.g., array=2. Use 'sqrt' with histogramx or histogramy. This will set the error bar span to be sqrt(n) where n is equal to the number of values in a particular bin."
        }, 
        "visible": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggles whether this will actually be visible in the rendered figure."
        }, 
        "width": {
            "type": "style"
        }
    }, 
    "figure": {
        "data": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A list-like array of the data that is to be visualized."
        }, 
        "layout": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "The layout dictionary-like object contains axes information, gobal settings, and layout information related to the rendering of the figure."
        }
    }, 
    "font": {
        "family": {
            "required": false, 
            "type": "style", 
            "description": "Setting for the font family."
        }, 
        "size": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "Setting for the font size."
        }, 
        "color": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Color of the text."
        }
    }, 
    "layout": {
        "title": {
            "val_types": "string", 
            "required": false, 
            "type": "plot_info", 
            "description": "The figure title."
        }, 
        "xaxis": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "The first 'xaxis' object can be entered into layout as 'xaxis' OR 'xaxis1', they're identical to plotly. After this, to create references to new x-axes, you need to define them in the layout dictionary."
        }, 
        "yaxis": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "The first 'yaxis' object can be entered into layout as 'yaxis' OR 'yaxis1', they're identical to plotly. After this, to create references to new y-axes, you need to define them in the layout dictionary."
        }, 
        "legend": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object describing the legend settings for this figure."
        }, 
        "width": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "The width in pixels of the figure you're creating."
        }, 
        "height": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "The height in pixels of the figure you're creating."
        }, 
        "autosize": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not to let plotly autosize this figure for you."
        }, 
        "categories": {
            "required": false, 
            "type": "plot_info"
        }, 
        "margin": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary-like object for describing the figure's margins."
        }, 
        "paper_bgcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "description": "str describing color"
        }, 
        "plot_bgcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "description": "str describing color"
        }, 
        "dragmode": {
            "val_types": "'zoom' | 'pan'", 
            "required": false, 
            "type": "style", 
            "description": "Set what happens when a user preforms a mouse 'drag' in the plot area. When set to 'zoom', a portion of the plot will be highlighted, when the viewer exits the drag, this highlighted section will be zoomed in on. When set to 'pan', data in the plot will move along with the viewers dragging motions. A user can always depress the 'shift' key to access the whatever functionality has not been set as the default."
        }, 
        "hovermode": {
            "val_types": "'closest' | 'x' | 'y'", 
            "required": false, 
            "type": "style", 
            "description": "Set what happens when a user hovers over the figure. When set to 'x', all data sharing the same 'x' coordinate will be shown on screen with corresponding trace labels. When set to 'y' all data sharing the same 'y' coordainte will be shown on the screen with corresponding trace labels. When set to 'closest', information about the data point closest to where the viewer is hovering will appear."
        }, 
        "barmode": {
            "val_types": "'stack' | 'group' | 'overlay'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location appear on the plot. If set to 'stack' the bars are stacked ontop of one another. If set to 'group', the bars are plotted next to one another, centered around the shared location. If set to 'overlay', the bars are simply plotted over one another, you may need to set the opacity to see this."
        }, 
        "bargap": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "This sets the gap between bars (or sets of bars) at different locations."
        }, 
        "bargroupgap": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "This sets the gap between bars in the same group. That is, when multiple bar objects are plotted and share the same locations, this sets the distance between bars at each location."
        }, 
        "boxmode": {
            "val_types": "'overlay' | 'group'", 
            "required": false, 
            "type": "style", 
            "description": "Sets how groups of box plots appear. If set to 'overlay', a group of boxes will be plotted directly on top of one another at their specified location. If set to 'group', the boxes will be centered around their shared location, but they will not overlap."
        }, 
        "boxgap": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Set the spacing between neighboring box locations. This does not effect the spacing within groups of boxes."
        }, 
        "boxgroupgap": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Set the spacing between neighboring boxes within a group. This does not effect the spacing between boxes at neighboring box locations."
        }, 
        "font": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "Set the global font for the figure, e.g., all axis labels."
        }, 
        "titlefont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "Set the title font for the figure."
        }, 
        "separators": {
            "required": false
        }, 
        "labeloffset": {
            "required": false
        }, 
        "bardir": {
            "required": false, 
            "type": "plot_info"
        }, 
        "direction": {
            "required": false
        }, 
        "tickcolor": {
            "required": false, 
            "type": "style"
        }, 
        "minortickcolor": {
            "required": false, 
            "type": "style"
        }, 
        "defaultcolorrange": {
            "required": false, 
            "type": "style"
        }, 
        "hidesources": {
            "required": false, 
            "type": "plot_info"
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not the legend will be shown in this figure."
        }, 
        "annotations": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A list-like object that holds annotation dictionaries."
        }, 
        "orientation": {
            "required": false, 
            "type": "plot_info"
        }, 
        "radialAxis": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "angularAxis": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object"
        }, 
        "needsEndSpacing": {}
    }, 
    "legend": {
        "x": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets the 'x' location of the legend."
        }, 
        "y": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets the 'y' location of the legend."
        }, 
        "bgcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Sets the background color for the legend."
        }, 
        "bordercolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Sets the enclosing border color for the legend."
        }, 
        "borderwidth": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of the enclosing border for the legend."
        }, 
        "font": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "This dictionary-like object describes the font settings within the legend."
        }, 
        "showlegend": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether or not the legend will be shown in this figure."
        }, 
        "traceorder": {
            "val_types": "'normal' | 'reversed'", 
            "required": false, 
            "type": "style", 
            "description": "Trace order is set by the order of the data in associated grid for the plot. This sets whether this order is read from left-to-right or from right-to-left."
        }, 
        "xref": {
            "val_types": "'paper' | 'x1' | 'x2' | etc", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines what the x coordinate for this object *refers* to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'x' location refers to the distance from the left side of the plotting area in normalized coordinates where 0=='left' and 1=='right'. If set to refer to an 'xaxis' object, e.g., 'x1', 'x2', 'x3', etc., the 'x' location will refer to the location in terms of this axis."
        }, 
        "yref": {
            "val_types": "'paper' | 'y1' | 'y2' | etc", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines what the x coordinate for this object *refers* to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'y' location refers to the distance from the bottom of the plotting area in normalized coordinates where 0=='bottom' and 1=='top'. If set to refer to a 'yaxis' object, e.g., 'y1', 'y2', 'y3', etc., the 'y' location will refer to the location in terms of this axis."
        }, 
        "xanchor": {
            "val_types": "'left' | 'center' | 'right'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines the horizontal location on the object referenced by 'x'. For example, if 'x'==1, 'xref'='paper', and 'xanchor'='right', the rightmost portion of this object will line up with the rightmost edge of the plotting area."
        }, 
        "yanchor": {
            "val_types": "'bottom' | 'middle' | 'top'", 
            "required": false, 
            "type": "plot_info", 
            "description": "This defines the vertical location on the object referenced by 'y'. For example, if 'y'==1, 'yref'='paper', and 'yanchor'='top', the upper edge of this object will line up with the upper edge of the plotting area."
        }
    }, 
    "line": {
        "dash": {
            "requried": false, 
            "val_types": "'dash' | 'dashdot' | 'dot' | 'solid'", 
            "type": "style", 
            "description": "The style of the line."
        }, 
        "color": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "description": "The color of the line."
        }, 
        "width": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "The width of the line."
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "smoothing": {
            "type": "style", 
            "description": "Only applies to contours"
        }
    }, 
    "margin": {
        "l": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Left margin size in pixels."
        }, 
        "r": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Right margin size in pixels."
        }, 
        "b": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Bottom margin size in pixels."
        }, 
        "t": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Top margin size in pixels."
        }, 
        "pad": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "The distance between edge of the plot and the bounding rectangle that encloses the plot."
        }, 
        "autoexpand": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style"
        }
    }, 
    "marker": {
        "symbol": {
            "val_types": "'dot' | 'cross' | 'diamond' | 'square' | 'triangle-down' | 'triangle-left' | 'triangle-right' | 'triangle-up' | 'x'", 
            "required": false, 
            "type": "style", 
            "description": "The symbol that is drawn on the plot for each marker."
        }, 
        "line": {
            "val_types": "Line object | dict", 
            "required": false, 
            "type": "object", 
            "description": "A dict-like object describing the line belonging to the marker."
        }, 
        "size": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "streamable": true, 
            "description": "The size of the marker to be drawn."
        }, 
        "sizemode": {
            "required": false, 
            "type": "style"
        }, 
        "sizeref": {
            "required": false, 
            "type": "style"
        }, 
        "color": {
            "val_types": "str describing color", 
            "description": "The color of the marker face.", 
            "requried": false, 
            "type": "style", 
            "streamable": true, 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ]
        }, 
        "opacity": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the opacity, or transparency, of this object. Also known as the alpha channel of colors, if the object's color is given in terms of 'rgba', this does not need to be defined."
        }, 
        "type": {
            "required": false, 
            "type": "style"
        }
    }, 
    "stream": {
        "token": {
            "val_types": "A stream id number, see https://plot.ly/settings", 
            "required": true, 
            "type": "plot_info", 
            "description": "This number links a data object on a plot with a stream. In other words, any data object you create can reference a 'stream'. If you stream data to plotly with the same stream id (token), plotly knows update THIS data object with the incoming data stream."
        }, 
        "maxpoints": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets the maximum number of points to keep on the plots from an incoming stream. For example, if 'maxpoints'=50, only the newest 50 points will be displayed on the plot."
        }
    }, 
    "radialAxis": {}, 
    "angularAxis": {}, 
    "xaxis": {
        "title": {
            "val_types": "string", 
            "required": false, 
            "type": "plot_info", 
            "description": "The xaxis title."
        }, 
        "domain": {
            "val_types": "number array of length 2", 
            "required": false, 
            "type": "plot_info", 
            "examples": [
                [
                    0, 
                    1
                ], 
                [
                    0, 
                    0.5
                ]
            ], 
            "description": "Sets the domain of this axis. The available space for this axis to live in is from 0 to 1."
        }, 
        "range": {
            "val_types": "number array of length 2", 
            "required": false, 
            "type": "style", 
            "examples": [
                [
                    -13, 
                    20
                ], 
                [
                    0, 
                    1
                ]
            ], 
            "description": "Defines the start and end point for the axis."
        }, 
        "type": {
            "val_types": "string: linear | log | category", 
            "required": false, 
            "type": "plot_info", 
            "description": "Defines format of the axis."
        }, 
        "showline": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Defines whether or not to show this axis line."
        }, 
        "linecolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Defines the axis line color."
        }, 
        "linewidth": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of the axis line."
        }, 
        "tick0": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets the starting point of the axis."
        }, 
        "dtick": {
            "val_type": "number", 
            "required": false, 
            "type": "style", 
            "description": "Sets the difference between ticks on this axis."
        }, 
        "ticks": {
            "requried": false, 
            "val_types": "string: 'inside' | 'outside' | '' (Empty str for NONE)", 
            "type": "style", 
            "description": "Sets format of tick visibility."
        }, 
        "ticklen": {
            "val_types": "number", 
            "required": false, 
            "type": "style", 
            "description": "Sets the length of the tick lines."
        }, 
        "tickcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "description": "Sets the color of the tick lines."
        }, 
        "tickwidth": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of the tick lines."
        }, 
        "nticks": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the number of ticks to appear on the axis."
        }, 
        "showticklabels": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide the axis tick labels."
        }, 
        "tickangle": {
            "val_types": "number: x in [-90, 90]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the angle of the ticks in degrees."
        }, 
        "exponentformat": {
            "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
            "required": false, 
            "type": "style", 
            "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted. If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency."
        }, 
        "showexponent": {
            "val_types": "'all' | 'first' | 'last' | 'none'", 
            "required": false, 
            "type": "style", 
            "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', NO exponents will appear, only the significands."
        }, 
        "showgrid": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide grid for the axis."
        }, 
        "gridcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Sets the axis grid color. Any HTML specified color is accepted."
        }, 
        "gridwidth": {
            "requried": false, 
            "val_types": "number: x > 0", 
            "type": "style", 
            "description": "Sets the grid width."
        }, 
        "autorange": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether to let plotly autorange the axis."
        }, 
        "rangemode": {
            "val_types": "string: 'normal' | 'tozero' | 'nonnegative'", 
            "required": false, 
            "type": "plot_info"
        }, 
        "autotick": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle axis autoticks."
        }, 
        "zeroline": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide an additional zeroline for this axis."
        }, 
        "zerolinecolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Set the color of this axis' zeroline."
        }, 
        "zerolinewidth": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of this axis' zeroline."
        }, 
        "titlefont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary for configuring the axis title font."
        }, 
        "tickfont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary for configuring the tick font."
        }, 
        "overlaying": {}, 
        "position": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets where the axis is positioned in the plotting space. For example 'position'=0.5 will place this axis in the exact center of the plotting space. This only has functionality if 'anchor'='free'."
        }, 
        "anchor": {
            "val_types": "'y' | 'free'", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets whether the xaxis will be anchored to its corresponding yaxis OR 'free' to appear anywhere in the vertical space of the plot."
        }, 
        "side": {
            "val_types": "'bottom' | 'top'", 
            "required": false, 
            "type": "style", 
            "description": "Set whether this axis sits at the 'bottom' of the plot or at the 'top' of the plot."
        }, 
        "mirror": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether to mirror the axis line to the opposite side of the plot."
        }
    }, 
    "xbins": {
        "start": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The starting point on the xaxis for the FIRST bin."
        }, 
        "end": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The end point on the xaxis for the FINAL bin."
        }, 
        "size": {
            "requried": false, 
            "val_types": "number: x > 0", 
            "type": "plot_info", 
            "description": "The size of each bin."
        }
    }, 
    "yaxis": {
        "title": {
            "val_types": "string", 
            "required": false, 
            "type": "plot_info", 
            "description": "The yaxis title."
        }, 
        "domain": {
            "val_types": "number array of length 2", 
            "required": false, 
            "type": "plot_info", 
            "examples": [
                [
                    0, 
                    1
                ], 
                [
                    0, 
                    0.5
                ]
            ], 
            "description": "Sets the domain of this axis. The available space for this axis to live in is from 0 to 1."
        }, 
        "range": {
            "val_types": "number array of length 2", 
            "required": false, 
            "type": "style", 
            "examples": [
                [
                    -13, 
                    20
                ], 
                [
                    0, 
                    1
                ]
            ], 
            "description": "Defines the start and end point for the axis."
        }, 
        "type": {
            "val_types": "string: linear | log | category", 
            "required": false, 
            "type": "plot_info", 
            "description": "Defines format of the axis."
        }, 
        "showline": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Defines whether or not to show this axis line."
        }, 
        "linecolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Defines the axis line color."
        }, 
        "linewidth": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of the axis line."
        }, 
        "tick0": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets the starting point of the axis."
        }, 
        "dtick": {
            "val_type": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the difference between ticks on this axis."
        }, 
        "ticks": {
            "requried": false, 
            "val_types": "string: 'inside' | 'outside' | '' (Empty str for NONE)", 
            "type": "style", 
            "description": "Sets format of tick visibility."
        }, 
        "ticklen": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the length of the tick lines."
        }, 
        "tickcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "description": "Sets the color of the tick lines."
        }, 
        "tickwidth": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of the tick lines."
        }, 
        "nticks": {
            "val_types": "number: x >= 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the number of ticks to appear on the axis."
        }, 
        "showticklabels": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide the axis tick labels."
        }, 
        "tickangle": {
            "val_types": "number: x in [-90, 90]", 
            "required": false, 
            "type": "style", 
            "description": "Sets the angle of the ticks in degrees."
        }, 
        "exponentformat": {
            "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
            "required": false, 
            "type": "style", 
            "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted. If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency."
        }, 
        "showexponent": {
            "val_types": "'all' | 'first' | 'last' | 'none'", 
            "required": false, 
            "type": "style", 
            "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', NO exponents will appear, only the significands."
        }, 
        "showgrid": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide grid for the axis."
        }, 
        "gridcolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Sets the axis grid color. Any HTML specified color is accepted."
        }, 
        "gridwidth": {
            "requried": false, 
            "val_types": "number: x > 0", 
            "type": "style", 
            "description": "Sets the grid width."
        }, 
        "autorange": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "plot_info", 
            "description": "Toggle whether to let plotly autorange the axis."
        }, 
        "rangemode": {
            "val_types": "string: 'normal' | 'tozero' | 'nonnegative'", 
            "required": false, 
            "type": "plot_info"
        }, 
        "autotick": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle axis autoticks."
        }, 
        "zeroline": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Show/Hide an additional zeroline for this axis."
        }, 
        "zerolinecolor": {
            "val_types": "str describing color", 
            "required": false, 
            "type": "style", 
            "examples": [
                "'green'", 
                "'rgb(0, 255, 0)'", 
                "'rgba(0, 255, 0, 0.3)'", 
                "'hsl(120,100%,50%)'", 
                "'hsla(120,100%,50%,0.3)'"
            ], 
            "description": "Set the color of this axis' zeroline."
        }, 
        "zerolinewidth": {
            "val_types": "number: x > 0", 
            "required": false, 
            "type": "style", 
            "description": "Sets the width of this axis' zeroline."
        }, 
        "titlefont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary for configuring the axis title font."
        }, 
        "tickfont": {
            "val_types": "dictionary-like", 
            "required": false, 
            "type": "object", 
            "description": "A dictionary for configuring the tick font."
        }, 
        "position": {
            "val_types": "number: x in [0, 1]", 
            "required": false, 
            "type": "style", 
            "description": "Sets where the axis is positioned in the plotting space. For example 'position'=0.5 will place this axis in the exact center of the plotting space. This only has functionality if 'anchor'='free'."
        }, 
        "anchor": {
            "val_types": "'x' | 'free'", 
            "required": false, 
            "type": "plot_info", 
            "description": "Sets whether the yaxis will be anchored to its corresponding xaxis OR 'free' to appear anywhere in the horizontal space of the plot."
        }, 
        "side": {
            "val_types": "'left' | 'right'", 
            "required": false, 
            "type": "style", 
            "description": "Set whether this axis sits at the 'left' of the plot or at the 'right' of the plot."
        }, 
        "mirror": {
            "val_types": "bool: True | False", 
            "required": false, 
            "type": "style", 
            "description": "Toggle whether to mirror the axis line to the opposite side of the plot."
        }, 
        "overlaying": {}
    }, 
    "ybins": {
        "start": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The starting point on the yaxis for the FIRST bin."
        }, 
        "end": {
            "val_types": "number", 
            "required": false, 
            "type": "plot_info", 
            "description": "The end point on the yaxis for the FINAL bin."
        }, 
        "size": {
            "requried": false, 
            "val_types": "number: x > 0", 
            "type": "plot_info", 
            "description": "The size of each bin."
        }
    }, 
    "contours": {
        "start": {
            "requried": false, 
            "type": "plot_info"
        }, 
        "end": {
            "requried": false, 
            "type": "plot_info"
        }, 
        "size": {
            "requried": false, 
            "type": "plot_info"
        }, 
        "coloring": {}, 
        "showlines": {
            "requried": false, 
            "val_types": "bool: True | False", 
            "type": "sytle", 
            "description": "Toggle whether the contour lines appear on the plot."
        }
    }
}